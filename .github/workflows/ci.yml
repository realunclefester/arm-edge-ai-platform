---
name: CI/CD Pipeline

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint-and-validate:
    name: Lint and Validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black==25.1.0 isort yamllint

      - name: Lint Python code
        run: |
          # Check Python syntax and style
          flake8 services/ mcp-servers/ --count \
            --select=E9,F63,F7,F82 --show-source --statistics
          flake8 services/ mcp-servers/ --count --exit-zero \
            --max-complexity=10 --max-line-length=127 --statistics

      - name: Check Python formatting
        run: |
          black --check --diff services/ mcp-servers/

      - name: Check import sorting
        run: |
          isort --check-only --diff services/ mcp-servers/

      - name: Validate YAML files
        run: |
          yamllint docker-compose.yml
          yamllint .github/workflows/

      - name: Validate Docker Compose
        run: |
          docker compose config

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python for security scan
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run Bandit security scan
        run: |
          bandit -r services/ mcp-servers/ -f json \
            -o bandit-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [lint-and-validate]

    strategy:
      matrix:
        service: [embeddings, analytics, log-aggregator, plotly-viz]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image for ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          platforms: linux/amd64,linux/arm64
          push: false
          tags: arm-edge-ai-${{ matrix.service }}:test
          no-cache: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cp .env.example .env
          # Set test credentials
          sed -i 's/your_secure_password_here/test_password_123/g' .env
          # Keep default user and database names for CI
          # sed -i 's/ai_platform_user/test_user/g' .env
          # sed -i 's/ai_platform_db/test_db/g' .env

      - name: Start services
        run: |
          docker compose up -d postgres
          sleep 30  # Wait for PostgreSQL to be ready
          docker compose up -d

      - name: Wait for services to be ready
        run: |
          timeout 300 bash -c \
            'until curl -f http://localhost:8001/health; do sleep 5; done'
          timeout 300 bash -c \
            'until curl -f http://localhost:8002/health; do sleep 5; done'
          timeout 300 bash -c \
            'until curl -f http://localhost:8004/health; do sleep 5; done'

      - name: Run API tests
        run: |
          # Test embeddings service
          response=$(curl -s -X POST http://localhost:8001/embed/single \
            -H "Content-Type: application/json" \
            -d '{"text": "test embedding", "normalize": true}')
          echo "Embeddings response: $response"

          # Test similarity
          response=$(curl -s -X POST http://localhost:8001/similarity \
            -H "Content-Type: application/json" \
            -d '{"text1": "hello world", "text2": "hello universe"}')
          echo "Similarity response: $response"

          # Test analytics service
          response=$(curl -s http://localhost:8002/health)
          echo "Analytics health: $response"

          # Test log aggregator
          response=$(curl -s http://localhost:8004/health)
          echo "Log aggregator health: $response"

      - name: Check service logs
        if: failure()
        run: |
          docker compose logs embeddings
          docker compose logs analytics
          docker compose logs log-aggregator
          docker compose logs postgres

      - name: Cleanup
        if: always()
        run: |
          docker compose down -v

  documentation-check:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for required documentation
        run: |
          # Check main documentation files exist
          test -f README.md || (echo "README.md missing" && exit 1)
          test -f LICENSE || (echo "LICENSE missing" && exit 1)
          test -f docs/architecture.md || \
            (echo "Architecture documentation missing" && exit 1)
          test -f docs/deployment.md || \
            (echo "Deployment documentation missing" && exit 1)

          # Check docker-compose.yml exists
          test -f docker-compose.yml || \
            (echo "docker-compose.yml missing" && exit 1)

          # Check .env.example exists
          test -f .env.example || (echo ".env.example missing" && exit 1)

      - name: Check documentation links
        run: |
          # Check for broken internal links in README
          grep -o '\[.*\](\\..*\\.md)' README.md | while read link; do
            file=$(echo $link | sed 's/.*](\\.\\///' | sed 's/).*//')
            test -f "$file" || (echo "Broken link: $file" && exit 1)
          done

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          cp .env.example .env
          sed -i 's/your_secure_password_here/test_password_123/g' .env
          docker compose up -d
          sleep 60  # Wait for all services

      - name: Run performance tests
        run: |
          # Warmup
          curl -X POST http://localhost:8001/embed/single \
            -H "Content-Type: application/json" \
            -d '{"text": "warmup", "normalize": true}'

          # Performance test - single embeddings
          echo "Testing single embedding performance..."
          time_start=$(date +%s%N)
          for i in {1..10}; do
            curl -s -X POST http://localhost:8001/embed/single \
              -H "Content-Type: application/json" \
              -d "{\"text\": \"performance test $i\", \
                \"normalize\": true}" > /dev/null
          done
          time_end=$(date +%s%N)
          avg_time=$(( (time_end - time_start) / 10000000 ))
          echo "Average time per embedding: ${avg_time}ms"

          # Performance test - batch embeddings
          echo "Testing batch embedding performance..."
          curl -s -X POST http://localhost:8001/embed \
            -H "Content-Type: application/json" \
            -d '{"texts": ["text1", "text2", "text3", "text4", "text5"], \
              "normalize": true}' > /dev/null

      - name: Cleanup
        if: always()
        run: docker compose down -v

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [lint-and-validate, security-scan, docker-build,
            integration-test, documentation-check]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' &&
        contains(github.event.head_commit.message, '[release]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate release notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "## ARM Edge AI Platform Release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Changes in this release:" >> $GITHUB_OUTPUT
          echo "${{ github.event.head_commit.message }}" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "### Services included:" >> $GITHUB_OUTPUT
          echo "- Embeddings Service (ARM-optimized)" >> $GITHUB_OUTPUT
          echo "- Analytics Engine" >> $GITHUB_OUTPUT
          echo "- Log Aggregator" >> $GITHUB_OUTPUT
          echo "- Plotly Visualization" >> $GITHUB_OUTPUT
          echo "- PostgreSQL + pgvector" >> $GITHUB_OUTPUT
          echo "- Node-RED Automation" >> $GITHUB_OUTPUT
          echo "- MCP Servers for Claude Code" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: ARM Edge AI Platform v${{ github.run_number }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: false
